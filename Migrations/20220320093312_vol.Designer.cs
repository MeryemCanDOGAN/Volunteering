// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using volunteer;

#nullable disable

namespace volunteer.Migrations
{
    [DbContext(typeof(VolunteerContext))]
    [Migration("20220320093312_vol")]
    partial class vol
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("volunteer.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisibility")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "meryem.dogan@sahabt.com",
                            IsBlocked = true,
                            IsVisibility = true,
                            Password = "123123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "fsm@gmail.com",
                            IsBlocked = true,
                            IsVisibility = true,
                            Password = "555555"
                        },
                        new
                        {
                            Id = 3,
                            Email = "gokhan@gmail.com",
                            IsBlocked = true,
                            IsVisibility = true,
                            Password = "1111111"
                        },
                        new
                        {
                            Id = 4,
                            Email = "bkagan@gmail.com",
                            IsBlocked = true,
                            IsVisibility = true,
                            Password = "1111111"
                        });
                });

            modelBuilder.Entity("volunteer.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DistrictId = 1,
                            OpenAddress = "Beylikdüzü/İstanbul"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            DistrictId = 2,
                            OpenAddress = "İzmir/Avcılar"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            DistrictId = 3,
                            OpenAddress = "Ankara/Büyükçekmece"
                        });
                });

            modelBuilder.Entity("volunteer.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ADetails")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ADetails = "Köy okullarına yardım için kırtasiye ürünleri topluyoruz.",
                            ReleaseDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 2,
                            ADetails = "Köy okullarındaki öğrenci kardeşlerimizin Mont, Bot, Çanta eksiklerini birlikte tamamlayalım.",
                            ReleaseDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            SchoolId = 3
                        },
                        new
                        {
                            Id = 3,
                            ADetails = "Az çok demeyelim , Köy okullarındaki öğrenci kardeşlerimizin Mont, Bot, Çanta eksiklerini birlikte tamamlayalım.",
                            ReleaseDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            SchoolId = 1
                        });
                });

            modelBuilder.Entity("volunteer.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 2,
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ankara"
                        });
                });

            modelBuilder.Entity("volunteer.CoatSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Counts")
                        .HasColumnType("int");

                    b.Property<int>("EightandTenYears")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("SixandEightYears")
                        .HasColumnType("int");

                    b.Property<int>("TenandTwelveYears")
                        .HasColumnType("int");

                    b.Property<int>("TwelveandFourteen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("CoatSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EightandTenYears = 14,
                            SchoolId = 2,
                            SixandEightYears = 10,
                            TenandTwelveYears = 22,
                            TwelveandFourteen = 32
                        },
                        new
                        {
                            Id = 2,
                            EightandTenYears = 15,
                            SchoolId = 1,
                            SixandEightYears = 14,
                            TenandTwelveYears = 11,
                            TwelveandFourteen = 12
                        },
                        new
                        {
                            Id = 3,
                            EightandTenYears = 18,
                            SchoolId = 3,
                            SixandEightYears = 15,
                            TenandTwelveYears = 12,
                            TwelveandFourteen = 25
                        });
                });

            modelBuilder.Entity("volunteer.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Beylikdüzü"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            Name = "Avcılar"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            Name = "Büyükçekmece"
                        });
                });

            modelBuilder.Entity("volunteer.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Woman"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Man"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("volunteer.HatScarfGloveSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Counts")
                        .HasColumnType("int");

                    b.Property<int>("EightandTenYears")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("SixandEightYears")
                        .HasColumnType("int");

                    b.Property<int>("TenandTwelveYears")
                        .HasColumnType("int");

                    b.Property<int>("TwelveandFourteen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("HatScarfGloveSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EightandTenYears = 12,
                            SchoolId = 1,
                            SixandEightYears = 10,
                            TenandTwelveYears = 23,
                            TwelveandFourteen = 18
                        },
                        new
                        {
                            Id = 2,
                            EightandTenYears = 33,
                            SchoolId = 2,
                            SixandEightYears = 11,
                            TenandTwelveYears = 28,
                            TwelveandFourteen = 55
                        },
                        new
                        {
                            Id = 3,
                            EightandTenYears = 26,
                            SchoolId = 3,
                            SixandEightYears = 32,
                            TenandTwelveYears = 45,
                            TwelveandFourteen = 29
                        });
                });

            modelBuilder.Entity("volunteer.ListOfRequirements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoatSizeId")
                        .HasColumnType("int");

                    b.Property<int>("HatScarfGloveSizeId")
                        .HasColumnType("int");

                    b.Property<int>("ShoesSizeId")
                        .HasColumnType("int");

                    b.Property<int>("StationeryEquipmentListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoatSizeId");

                    b.HasIndex("HatScarfGloveSizeId");

                    b.HasIndex("ShoesSizeId");

                    b.HasIndex("StationeryEquipmentListId");

                    b.ToTable("ListOfRequirements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoatSizeId = 1,
                            HatScarfGloveSizeId = 1,
                            ShoesSizeId = 1,
                            StationeryEquipmentListId = 1
                        },
                        new
                        {
                            Id = 2,
                            CoatSizeId = 3,
                            HatScarfGloveSizeId = 1,
                            ShoesSizeId = 2,
                            StationeryEquipmentListId = 1
                        });
                });

            modelBuilder.Entity("volunteer.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Volunteer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Teacher"
                        });
                });

            modelBuilder.Entity("volunteer.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberofClass")
                        .HasColumnType("int");

                    b.Property<int>("NumberofStudent")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 2,
                            Name = "Büyükşehir İlkÖğretim Okulu",
                            NumberofClass = 6,
                            NumberofStudent = 50,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 3,
                            Name = "Bizimkent İlkÖğretim Okulu",
                            NumberofClass = 5,
                            NumberofStudent = 32,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 2,
                            Name = "Koç İlkÖğretim Okulu",
                            NumberofClass = 6,
                            NumberofStudent = 50,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("volunteer.ShoesSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Counts")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ThirtyFive")
                        .HasColumnType("int");

                    b.Property<int>("ThirtyFour")
                        .HasColumnType("int");

                    b.Property<int>("ThirtyThree")
                        .HasColumnType("int");

                    b.Property<int>("ThirtyTwo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("ShoesSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SchoolId = 1,
                            ThirtyFive = 14,
                            ThirtyFour = 11,
                            ThirtyThree = 16,
                            ThirtyTwo = 12
                        },
                        new
                        {
                            Id = 2,
                            SchoolId = 2,
                            ThirtyFive = 14,
                            ThirtyFour = 11,
                            ThirtyThree = 13,
                            ThirtyTwo = 12
                        },
                        new
                        {
                            Id = 3,
                            SchoolId = 3,
                            ThirtyFive = 9,
                            ThirtyFour = 11,
                            ThirtyThree = 6,
                            ThirtyTwo = 12
                        });
                });

            modelBuilder.Entity("volunteer.StationeryEquipmentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Backpack")
                        .HasColumnType("int");

                    b.Property<int>("Book")
                        .HasColumnType("int");

                    b.Property<int?>("Counts")
                        .HasColumnType("int");

                    b.Property<int>("Eraser")
                        .HasColumnType("int");

                    b.Property<int>("Lunchbox")
                        .HasColumnType("int");

                    b.Property<int>("Notebook")
                        .HasColumnType("int");

                    b.Property<int>("Pencil")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("StationeryEquipmentLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Backpack = 120,
                            Book = 25,
                            Eraser = 190,
                            Lunchbox = 120,
                            Notebook = 100,
                            Pencil = 180,
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            Backpack = 155,
                            Book = 90,
                            Eraser = 300,
                            Lunchbox = 155,
                            Notebook = 200,
                            Pencil = 250,
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 3,
                            Backpack = 80,
                            Book = 25,
                            Eraser = 165,
                            Lunchbox = 80,
                            Notebook = 100,
                            Pencil = 180,
                            SchoolId = 3
                        });
                });

            modelBuilder.Entity("volunteer.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Branch = "Sınıf Ogretmeni",
                            Name = "Ayşe",
                            PhoneNumber = 5555222,
                            Surname = "Demir"
                        },
                        new
                        {
                            Id = 2,
                            Branch = "Sınıf Ogretmeni",
                            Name = "Mehmet",
                            PhoneNumber = 5555222,
                            Surname = "Demir"
                        },
                        new
                        {
                            Id = 3,
                            Branch = "Sınıf Ogretmeni",
                            Name = "Fatma",
                            PhoneNumber = 5555222,
                            Surname = "Demir"
                        });
                });

            modelBuilder.Entity("volunteer.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            AddressId = 1,
                            BirthDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Meryem Can",
                            GenderId = 1,
                            LastName = "Dogan",
                            PhoneNumber = 1231231,
                            RoleId = 1,
                            Username = "mcan"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            AddressId = 2,
                            BirthDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Fatih Sultan Mehmet",
                            GenderId = 2,
                            LastName = "Dogan",
                            PhoneNumber = 12312312,
                            RoleId = 2,
                            Username = "fsm"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 3,
                            AddressId = 3,
                            BirthDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Gökhan",
                            GenderId = 2,
                            LastName = "Dogan",
                            PhoneNumber = 123123123,
                            RoleId = 3,
                            Username = "gkhn"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 4,
                            AddressId = 2,
                            BirthDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Bilge Kagan",
                            GenderId = 2,
                            LastName = "Dogan",
                            PhoneNumber = 123123123,
                            RoleId = 2,
                            Username = "bkgn"
                        });
                });

            modelBuilder.Entity("volunteer.Address", b =>
                {
                    b.HasOne("volunteer.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("volunteer.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("volunteer.Announcement", b =>
                {
                    b.HasOne("volunteer.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("volunteer.CoatSize", b =>
                {
                    b.HasOne("volunteer.School", "School")
                        .WithMany("CoatSizes")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("volunteer.District", b =>
                {
                    b.HasOne("volunteer.City", "City")
                        .WithMany("District")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("volunteer.HatScarfGloveSize", b =>
                {
                    b.HasOne("volunteer.School", "School")
                        .WithMany("HatScarfGloveSizes")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("volunteer.ListOfRequirements", b =>
                {
                    b.HasOne("volunteer.CoatSize", "CoatSize")
                        .WithMany()
                        .HasForeignKey("CoatSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("volunteer.HatScarfGloveSize", "HatScarfGloveSize")
                        .WithMany()
                        .HasForeignKey("HatScarfGloveSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("volunteer.ShoesSize", "ShoesSize")
                        .WithMany("ListOfRequirements")
                        .HasForeignKey("ShoesSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("volunteer.StationeryEquipmentList", "EquipmentList")
                        .WithMany("ListOfRequirements")
                        .HasForeignKey("StationeryEquipmentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoatSize");

                    b.Navigation("EquipmentList");

                    b.Navigation("HatScarfGloveSize");

                    b.Navigation("ShoesSize");
                });

            modelBuilder.Entity("volunteer.School", b =>
                {
                    b.HasOne("volunteer.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("volunteer.Teacher", "Teacher")
                        .WithMany("Schools")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("volunteer.ShoesSize", b =>
                {
                    b.HasOne("volunteer.School", "School")
                        .WithMany("ShoesSizes")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("volunteer.StationeryEquipmentList", b =>
                {
                    b.HasOne("volunteer.School", "Schoool")
                        .WithMany("StationeryEquipmentLists")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Schoool");
                });

            modelBuilder.Entity("volunteer.User", b =>
                {
                    b.HasOne("volunteer.Account", "Account")
                        .WithMany("User")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("volunteer.Address", "Address")
                        .WithMany("User")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("volunteer.Gender", "Gender")
                        .WithMany("User")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("volunteer.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Gender");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("volunteer.Account", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("volunteer.Address", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("volunteer.City", b =>
                {
                    b.Navigation("District");
                });

            modelBuilder.Entity("volunteer.Gender", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("volunteer.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("volunteer.School", b =>
                {
                    b.Navigation("CoatSizes");

                    b.Navigation("HatScarfGloveSizes");

                    b.Navigation("ShoesSizes");

                    b.Navigation("StationeryEquipmentLists");
                });

            modelBuilder.Entity("volunteer.ShoesSize", b =>
                {
                    b.Navigation("ListOfRequirements");
                });

            modelBuilder.Entity("volunteer.StationeryEquipmentList", b =>
                {
                    b.Navigation("ListOfRequirements");
                });

            modelBuilder.Entity("volunteer.Teacher", b =>
                {
                    b.Navigation("Schools");
                });
#pragma warning restore 612, 618
        }
    }
}
